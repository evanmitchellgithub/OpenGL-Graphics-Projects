#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 light_position; 
uniform vec3 cameraPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform float shininess;

in vec2 TexCoords;

uniform sampler2D normalMap; //normalmap
uniform sampler2D textureMap;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light_position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.8;
    vec3 viewDir = normalize(cameraPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 specular = specularStrength * spec * lightColor;  

    vec2 texCoord = TexCoords * 15.0; // Repeat the texture 15 times
    vec2 wrappedCoord = mod(texCoord, 1.0); // Wrap the texture coordinates 
    vec3 OC = texture(textureMap,wrappedCoord).rgb;
    vec3 result = (ambient + diffuse + specular) * OC;
    FragColor = vec4(result, 1.0);
} 